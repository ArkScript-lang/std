(import "tests-tools.ark")

(import "String.ark")

(let string-tests (fun () {
    (mut tests 0)
    (let start-time (time))

    (set tests (assert-eq "abcdefghijklmnopqrstuvwxyz" (str:toLower "ABCDEFGHIJKLMNOPQRSTUVWXYZ") "string lower" tests))
    (set tests (assert-eq "abcdefghijklmnopqrstuvwxyz" (str:toLower "abcdefghijklmnopqrstuvwxyz") "string lower" tests))
    (set tests (assert-eq "ABCDEFGHIJKLMNOPQRSTUVWXYZ" (str:toUpper "abcdefghijklmnopqrstuvwxyz") "string upper" tests))
    (set tests (assert-eq "ABCDEFGHIJKLMNOPQRSTUVWXYZ" (str:toUpper "ABCDEFGHIJKLMNOPQRSTUVWXYZ") "string upper" tests))

    (set tests (assert-eq "hello world" (str:reverse "dlrow olleh") "string reverse" tests))
    (set tests (assert-eq "" (str:reverse "") "string reverse" tests))
    (set tests (assert-eq "a" (str:reverse "a") "string reverse" tests))

    (set tests (assert-eq "hello" (str:slice "hello world" 0 5) "string slice" tests))
    (set tests (assert-eq "hello world" (str:slice "hello world" 0 100) "string slice" tests))
    (set tests (assert-eq "h" (str:slice "hello world" 0 1) "string slice" tests))
    (set tests (assert-eq "ello" (str:slice "hello world" 1 4) "string slice" tests))

    (set tests (assert-eq ["a" "bc" "def"] (str:split "a,bc,def" ",") "string split" tests))
    (set tests (assert-eq ["a" "bc" "def"] (str:split "a-;-bc-;-def" "-;-") "string split" tests))
    (set tests (assert-eq ["abcdef"] (str:split "abcdef" ";;;;") "string split" tests))
    (set tests (assert-eq ["a"] (str:split "a" ",") "string split" tests))
    (set tests (assert-eq [] (str:split "" ",") "string split" tests))

    (set tests (assert-eq "hello world" (str:replace "hello world" "coucou" "not") "string replace" tests))
    (set tests (assert-eq "not world" (str:replace "hello world" "hello" "not") "string replace" tests))
    (set tests (assert-eq "not not " (str:replace "hello hello " "hello" "not") "string replace" tests))

    (set tests (assert-eq "hello;3.14;true;world" (str:join ["hello" 3.14 true "world"] ";") "string join" tests))
    (set tests (assert-eq "hello" (str:join ["hello"] ";") "string join" tests))
    (set tests (assert-eq "" (str:join [] ";;") "string join" tests))

    (recap "String tests passed" tests (- (time) start-time))

    tests
}))

(let passed-string (string-tests))
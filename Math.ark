# @brief Return the absolute value of a number
# @param _x the number to get the absolute value of
# @author https://github.com/rstefanic
(let abs (fun (_x)
  (if (< _x 0)
    (* -1 _x)
    _x)))

# @brief Return true if the number is even, false otherwise
# @param _n the number
# @author https://github.com/rstefanic
(let even (fun (_n) (= 0 (mod _n 2))))

# @brief Return true if the number is odd, false otherwise
# @param _n the number
# @author https://github.com/rstefanic
(let odd (fun (_n) (= 1 (abs (mod _n 2)))))

# @brief Get the minimum between two numbers
# @param _a the first number
# @param _b the second number
# @author https://github.com/rstefanic
(let min (fun (_a _b)
  (if (< _a _b)
    _a
    _b)))

# @brief Get the maximum between two numbers
# @param _a the first number
# @param _b the second number
# @author https://github.com/rstefanic
(let max (fun (_a _b)
  (if (> _a _b)
    _a
    _b)))

# @brief Get a number to a given power
# @details Note that it's defined as exp(a * ln(x)), thus won't work for negative numbers
# @param _x the number to pow
# @param _a the exponent
# @author https://github.com/SuperFola
(let pow (fun (_x _a) (math:exp (* _a (math:ln _x)))))

# @brief Get the square root of a number
# @details Square roots can't be taken for negative numbers for obvious reasons.
# @param _x the number
# @author https://github.com/SuperFola
(let sqrt (fun (_x) (math:exp (* 0.5 (math:ln _x)))))

# @brief Run the fibonacci function on a number
# @param n the number
# @author https://github.com/SuperFola
# =begin
# (fibo 45 0 1)
# =end
(let fibo (fun (n) {
  (let impl (fun (n p c)
    (if (<= n 0)
      0
      (if (= n 1)
        c
        (impl (- n 1) c (+ p c))))))
  (impl n 0 1) }))

# @brief Check if a given number is prime
# @param n the number
# @author https://github.com/SuperFola
(let prime? (fun (n)
  (if (= 2 n)
    true
    (if (or (= 0 (mod n 2)) (= 1 n))
      false
      {
        (let k (math:ceil (+ 1 (sqrt n))))
        (mut i 3)
        (mut continue true)

        (while (and continue (< i k)) {
          (if (= 0 (mod n i))
            (set continue false))
          (set i (+ 2 i)) })
        continue }))))

# @brief Returns the list of a number's divisors
# @param n the number
# @author https://github.com/Wafelack
# =begin
# (divs 6) # Returns [1 2 3 6]
# =end
(let divs (fun (n) {
  (assert (>= n 2) "divs: n must be greater or equal to 2")
  (mut i 2)
  (mut divisors [1])
  (let top (math:ceil (/ n 2)))

  (while (and (<= i top) (!= top n)) {
    (if (= (mod n i) 0)
      (set divisors (append divisors i)))
    (set i (+ i 1)) })
  (append divisors n) }))

# @brief Returns the logarithm base n of a number
# @param x the number
# @param n the base
# @author https://github.com/Gryfenfer97
# =begin
# (log 81 3) # Returns 4
# =end
(let log (fun (x n) {
  (assert (> x 0) "log: x must be greater than 0")
  (assert (>= n 1) "log: n must be greater or equal to 1")
  (math:round (/ (math:ln x) (math:ln n))) }))

# @brief Returns the logarithm base 2 of a number
# @param x the number
# @author https://github.com/Gryfenfer97
# =begin
# (log2 128) # Returns 7
# =end
(let log2 (fun (x) (log x 2)))

# @brief Returns the logarithm base 10 of a number
# @param x the number
# @author https://github.com/Gryfenfer97
# =begin
# (log10 1000) # Returns 3
# =end
(let log10 (fun (x) (log x 10)))

# @brief Returns the quotient of the euclidian division of a and b
# @param a the dividend
# @param b the divisor
# @author https://github.com/fabien-zoccola
# =begin
# (floordiv 14 6) # Returns 2
# =end
(let floordiv (fun (a b) (math:floor (/ a b))))

# @brief Create a complex number
# @param real the real part of the complex number
# @param imag the imaginary value
# =begin
# (let c (complex 1 2))
# (print c.real " " c.imag)  # 1 2
# =end
# @author https://github.com/SuperFola
(let complex (fun (real imag)
  (fun (&real
    &imag) ())))

# @brief Compute the addition of two complex number
# @param _c0 the first complex number
# @param _c1 the second complex number
# =begin
# (let c (complex-add (complex 1 2) (complex 3 4)))
# (print c.real " " c.imag)  # 4 6
# =end
# @author https://github.com/SuperFola
(let complex-add (fun (_c0 _c1) (complex (+ _c0.real _c1.real) (+ _c0.imag _c1.imag))))

# @brief Compute the subtraction of two complex number
# @param _c0 the first complex number
# @param _c1 the second complex number
# =begin
# (let c (complex-sub (complex 1 2) (complex 3 4)))
# (print c.real " " c.imag)  # -2 -2
# =end
# @author https://github.com/SuperFola
(let complex-sub (fun (_c0 _c1) (complex (- _c0.real _c1.real) (- _c0.imag _c1.imag))))

# @brief Compute the multiplication of two complex number
# @param _c0 the first complex number
# @param _c1 the second complex number
# =begin
# (let c (complex-mul (complex 1 2) (complex 3 4)))
# (print c.real " " c.imag)  # -5 10
# =end
# @author https://github.com/SuperFola
(let complex-mul (fun (_c0 _c1) (complex (+ (* _c0.real _c1.real) (- 0 (* _c0.imag _c1.imag))) (+ (* _c0.real _c1.imag) (* _c1.real _c0.imag)))))

# @brief Compute the conjugate of a complex number
# @param _c the complex number
# =begin
# (let c (complex-conjugate (complex 1 2)))
# (print c.real " " c.imag)  # 1 -2
# =end
# @author https://github.com/SuperFola
(let complex-conjugate (fun (_c) (complex _c.real (- 0 _c.imag))))

# @brief Compute the module of a complex number
# @param _c the complex number
# =begin
# (let c (complex-module (complex 1 2)))
# (print c)  # 2.2360679774997896964...
# =end
# @author https://github.com/SuperFola
(let complex-module (fun (_c) (sqrt (+ (* _c.real _c.real) (* _c.imag _c.imag)))))

# @brief Compute the division of two complex number
# @param _c0 the first complex number
# @param _c1 the second complex number
# =begin
# (let c (complex-div (complex 1 2) (complex 3 4)))
# (print c.real " " c.imag)  # 0.44 0.08
# =end
# @author https://github.com/SuperFola
(let complex-div (fun (_c0 _c1) {
  (let _conj (complex-conjugate _c1))
  (let _top (complex-mul _c0 _conj))
  (let _denom (+ (* _c1.real _c1.real) (* _c1.imag _c1.imag)))
  (complex (/ _top.real _denom) (/ _top.imag _denom)) }))

# @brief Select a random element from a list
# @details If the list is empty, returns nil
# @param _L list of elements
# =begin
# (import std.Random)
# (print (random:choice [1 2 3]))
# =end
# @author https://github.com/SuperFola
(let choice (fun (_L)
  (if (empty? _L)
    nil
    (if (= 1 (len _L))
      (head _L)
      (@ _L (random 0 (- (len _L) 1)))))))

# @brief Shuffle a given list
# @details The original list is not modified
# @param _L list to shuffle
# =begin
# (import std.Random)
# (let data [1 2 3 4 5])
# (let randomized (random:shuffle data))
# =end
# @author https://github.com/SuperFola
(let shuffle (fun (_L) {
  (mut _output [])

  (while (not (empty? _L)) {
    (let _idx (random 0 (- (len _L) 1)))
    (append! _output (@ _L _idx))
    (pop! _L _idx) })

  _output }))

